#Preamble
library(ggplot2)
library(tidyr)
library(plyr);library(dplyr, warn.conflicts = F)
library(tictoc)
library(stargazer)
rm(list=ls())
s = function(x){summary(factor(x))}
####################################################################################################
#Set global parameters
xlim = 100 #neighborhood size x. call this meters. or km if this is city scale??
ylim = 100 #neighborhood size y. call this meters. or km if this is city scale??
ngrid = 10 #number of grid spaces
library(spatstat)
#https://rdrr.io/cran/spatstat/man/rPoissonCluster.html
# multitype Neyman-Scott process (each cluster is a multitype process)
#[This is same as Matern cluster process, only with marks?]
nclust2 <- function(x0, y0, radius, n, types=c("yes", "no"), p) {
X <- runifdisc(n, radius, centre=c(x0, y0))
#M <- sample(types, n, replace=TRUE, prob = c(p, 1-p)) #this just makes the marks random
M <- sample(types, 1, replace=TRUE, prob = c(p, 1-p)) %>% rep(n)#this gives everybody in the cluster the same mark
marks(X) <- M
return(X)
}
#Nonsegregated version: Type is NOT by cluster
nclust1 <- function(x0, y0, radius, n) {
X <- runifdisc(n, radius, centre=c(x0, y0))
return(X)
}
ClusterSeg = function(n_samp = 100, p = 0.3, nclus = 13, ka = 0.05, r = 3){
kids = rPoissonCluster(kappa = ka, #determines number of clusters
expand = 10, #expansion window for parents (so cluster center can be offscreen)
rcluster = nclust2, #function for generating clusters, above
radius = r,#3, #tried 10, but the clusters overlap too much. Size of cluster
n = nclus, #tried 5, but it didn't look very segregated. Number in cluster
p = p, #prob of minority
win = owin(c(0,100),c(0,100))) #limits of window
kids_df = data.frame(long = kids$x,
lat = kids$y,
minor = kids$marks)
ns = min(nrow(kids_df), n_samp)
return(kids_df[sample(nrow(kids_df), ns), ]) #return sample of n rows
}
ClusterNonSeg = function(n_samp = 100, p = 0.3, nclus = 13, ka = 0.05, r = 3){
kids = rPoissonCluster(kappa = ka, #determines number of clusters
expand = 10, #expansion window for parents (so cluster center can be offscreen)
rcluster = nclust1, #function for generating clusters, above
radius = r,#3, Size of cluster
n = nclus, #Number in cluster
#p = p,
win = owin(c(0,100),c(0,100))) #limits of window
marks(kids) = sample( c('yes', 'no'), kids$n, replace=TRUE, prob = c(p, 1-p)) #select marks; not by cluster (because nonseg). Determines majority/minority
kids_df = data.frame(long = kids$x,
lat = kids$y,
minor = kids$marks)
ns = min(nrow(kids_df), n_samp)
return(kids_df[sample(nrow(kids_df), ns), ]) #return sample of n rows
}
#make one and plot
d = ClusterSeg(ka = 0.01, nclus = 100, r = 10, p = 0.4, n_samp = 1E6) %>% rename(Ethnicity = minor) %>%
mutate(Ethnicity = mapvalues(Ethnicity, from = c('yes', 'no'), to = c('Minority','Majority')))
#ggplot(data = d) + geom_point(aes(x = long, y = lat, shape = Ethnicity), size = 2) + theme_bw() +
ggplot(data = d) + geom_point(aes(x = long, y = lat, color = Ethnicity), size = 2) + theme_bw() +
ggtitle('Cluster segregation example') +
theme(text = element_text(size=24), plot.title = element_text(hjust = 0.5)) +
scale_shape_manual(values = c(1, 2)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.background = element_rect(fill = "grey")) +
scale_color_manual(values=c("darkmagenta", "green4")) +
xlim(0,100) + ylim(0,100)
path0 = paste0('/Users/jeremyspater/Dropbox/duke/political economy core/prospectus/methods paper/results_output/',Sys.Date(),'/')
dir.create(path0)
#Nonsegregated neighborhoods: just a uniform distribution
create_Nonseg = function(n, xlim, ylim, pminority){
fr = data.frame(long = runif(n,0,xlim),
lat = runif(n,0,xlim),
minor = rbinom(n,1,pminority) == 1)
return(fr)
}
create_Seg = function(n, xlim, ylim, pminority, conc){ #concentration parameter
fr = data.frame(minor = rbinom(n,1,pminority) == 1,
long = NA,
lat = NA,
ghe = rbinom(n,1,conc)) #"ghetto" parameter: proportion of each group on the "correct" side
#lat longs for majority (not concentrated), ie ghe = F
fr$long[fr$minor == F & fr$ghe == F] = runif(sum(fr$minor == F & fr$ghe == F), 0, xlim) #x: runif from 0 to xlim
fr$lat[fr$minor == F & fr$ghe == F] = runif(sum(fr$minor == F & fr$ghe == F), 0, ylim) #y: runif from 0 to ylim
#lat longs for majority (concentrated)
fr$long[fr$minor == F & fr$ghe == T] = runif(sum(fr$minor == F & fr$ghe == T), min = 0, #x: runif from 0 to ghetto limit
max = (1 - pminority)*xlim) #ghetto limit: proportional to size of majority
fr$lat[fr$minor == F & fr$ghe == T] = runif(sum(fr$minor == F & fr$ghe == T), 0, ylim) #y: runif from 0 to xlim
#lat longs for minority (not concentrated)
fr$long[fr$minor == T & fr$ghe == F] = runif(sum(fr$minor == T & fr$ghe == F), 0, xlim) #x: runif from 0 to xlim
fr$lat[fr$minor == T & fr$ghe == F] = runif(sum(fr$minor == T & fr$ghe == F), 0, ylim) #y: runif from 0 to ylim
#lat longs for minority (concentrated)
fr$long[fr$minor == T & fr$ghe == T] = runif(sum(fr$minor == T & fr$ghe == T),  #x: runif from ghetto edge to xlim
min = (1-pminority)*xlim, max = xlim) #ghetto limit: prop. to size of minority
fr$lat[fr$minor == T & fr$ghe == T] = runif(sum(fr$minor == T & fr$ghe == T), 0, ylim) #y: runif from 0 to ylim
return(fr)
}
#make one and plot
d = create_Seg(n = 10000, xlim = 100, ylim = 100, pminority = 0.3, conc = 0.8) %>% rename(Ethnicity = minor) %>%
mutate(Ethnicity = mapvalues(Ethnicity, from = c('TRUE', 'FALSE'), to = c('Minority','Majority')))
ggplot(data = d) + geom_point(aes(x = long, y = lat, color = Ethnicity), size = 2) + theme_bw() +
ggtitle('Binary segregation example') + theme(text = element_text(size=24), plot.title = element_text(hjust = 0.5)) +
scale_shape_manual(values = c(1, 2)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.background = element_rect(fill = "grey")) +
scale_color_manual(values=c("darkmagenta", "green4")) +
xlim(0,100) + ylim(0,100)
path0 = paste0('/Users/jeremyspater/Dropbox/duke/political economy core/prospectus/methods paper/results_output/',Sys.Date(),'/')
dir.create(path0)
#27 sep 23: based on 25 aug '23; change the comments; add classification algorithm
#25 aug '23 based on 9-10-19; for github
#9-10-19 based on 5-24-19_accuracyplots and 5-22-19_sim
#Point is just to make and plot a binary and a clustered neighborhoods, using colors
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)  #quick and dirty way to suppress warnings
#Preamble from 9-10-19 website plots
library(ggplot2)
library(tidyr)
library(plyr);library(dplyr, warn.conflicts = F)
library(tictoc)
library(stargazer)
rm(list=ls())
s = function(x){summary(factor(x))}
####################################################################################################
####################################################################################################
#Set global parameters
xlim = 100 #neighborhood size x; units can be considered meters (neighborhood scale)
ylim = 100 #neighborhood size y; units can be considered meters (neighborhood scale)
ngrid = 10 #number of grid spaces
####################################################################################################
####################################################################################################
#Binary segregation
#Nonsegregated neighborhoods: just a uniform distribution
create_Nonseg = function(n, xlim, ylim, pminority){
fr = data.frame(long = runif(n,0,xlim),
lat = runif(n,0,xlim),
minor = rbinom(n,1,pminority) == 1)
return(fr)
}
#Seg neighborhoods: Assume that majority is uniform across whole space
create_Seg = function(n, xlim, ylim, pminority, conc){ #concentration parameter
fr = data.frame(minor = rbinom(n,1,pminority) == 1,
long = NA,
lat = NA,
ghe = rbinom(n,1,conc)) #"ghetto" parameter: proportion of each group on the "correct" side
#lat longs for majority (not concentrated), ie ghe = F
fr$long[fr$minor == F & fr$ghe == F] = runif(sum(fr$minor == F & fr$ghe == F), 0, xlim) #x: runif from 0 to xlim
fr$lat[fr$minor == F & fr$ghe == F] = runif(sum(fr$minor == F & fr$ghe == F), 0, ylim) #y: runif from 0 to ylim
#lat longs for majority (concentrated)
fr$long[fr$minor == F & fr$ghe == T] = runif(sum(fr$minor == F & fr$ghe == T), min = 0, #x: runif from 0 to ghetto limit
max = (1 - pminority)*xlim) #ghetto limit: proportional to size of majority
fr$lat[fr$minor == F & fr$ghe == T] = runif(sum(fr$minor == F & fr$ghe == T), 0, ylim) #y: runif from 0 to xlim
#lat longs for minority (not concentrated)
fr$long[fr$minor == T & fr$ghe == F] = runif(sum(fr$minor == T & fr$ghe == F), 0, xlim) #x: runif from 0 to xlim
fr$lat[fr$minor == T & fr$ghe == F] = runif(sum(fr$minor == T & fr$ghe == F), 0, ylim) #y: runif from 0 to ylim
#lat longs for minority (concentrated)
fr$long[fr$minor == T & fr$ghe == T] = runif(sum(fr$minor == T & fr$ghe == T),  #x: runif from ghetto edge to xlim
min = (1-pminority)*xlim, max = xlim) #ghetto limit: prop. to size of minority
fr$lat[fr$minor == T & fr$ghe == T] = runif(sum(fr$minor == T & fr$ghe == T), 0, ylim) #y: runif from 0 to ylim
return(fr)
}
#make one and plot
d = create_Seg(n = 10000, xlim = 100, ylim = 100, pminority = 0.3, conc = 0.8) %>% rename(Ethnicity = minor) %>%
mutate(Ethnicity = mapvalues(Ethnicity, from = c('TRUE', 'FALSE'), to = c('Minority','Majority')))
ggplot(data = d) + geom_point(aes(x = long, y = lat, color = Ethnicity), size = 2) + theme_bw() +
ggtitle('Binary segregation example') + theme(text = element_text(size=24), plot.title = element_text(hjust = 0.5)) +
scale_shape_manual(values = c(1, 2)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.background = element_rect(fill = "grey")) +
scale_color_manual(values=c("darkmagenta", "green4")) +
xlim(0,100) + ylim(0,100)
path0 = paste0('/Users/jeremyspater/Dropbox/duke/political economy core/prospectus/methods paper/results_output/',Sys.Date(),'/')
dir.create(path0)
#ggsave(filename = paste0(path0, 'binary_seg_example_website.png'), height = 200, width = 200, units = 'mm'); rm(path0)
####################################################################################################
#Clustered process
library(spatstat)
#https://rdrr.io/cran/spatstat/man/rPoissonCluster.html
# multitype Neyman-Scott process (each cluster is a multitype process)
#[This is same as Matern cluster process, only with marks?]
nclust2 <- function(x0, y0, radius, n, types=c("yes", "no"), p) {
X <- runifdisc(n, radius, centre=c(x0, y0))
#M <- sample(types, n, replace=TRUE, prob = c(p, 1-p)) #this just makes the marks random
M <- sample(types, 1, replace=TRUE, prob = c(p, 1-p)) %>% rep(n)#this gives everybody in the cluster the same mark
marks(X) <- M
return(X)
}
#Nonsegregated version: Type is NOT by cluster
nclust1 <- function(x0, y0, radius, n) {
X <- runifdisc(n, radius, centre=c(x0, y0))
return(X)
}
ClusterSeg = function(n_samp = 100, p = 0.3, nclus = 13, ka = 0.05, r = 3){
kids = rPoissonCluster(kappa = ka, #determines number of clusters
expand = 10, #expansion window for parents (so cluster center can be offscreen)
rcluster = nclust2, #function for generating clusters, above
radius = r,#3, #tried 10, but the clusters overlap too much. Size of cluster
n = nclus, #tried 5, but it didn't look very segregated. Number in cluster
p = p, #prob of minority
win = owin(c(0,100),c(0,100))) #limits of window
kids_df = data.frame(long = kids$x,
lat = kids$y,
minor = kids$marks)
ns = min(nrow(kids_df), n_samp)
return(kids_df[sample(nrow(kids_df), ns), ]) #return sample of n rows
}
ClusterNonSeg = function(n_samp = 100, p = 0.3, nclus = 13, ka = 0.05, r = 3){
kids = rPoissonCluster(kappa = ka, #determines number of clusters
expand = 10, #expansion window for parents (so cluster center can be offscreen)
rcluster = nclust1, #function for generating clusters, above
radius = r,#3, Size of cluster
n = nclus, #Number in cluster
#p = p,
win = owin(c(0,100),c(0,100))) #limits of window
marks(kids) = sample( c('yes', 'no'), kids$n, replace=TRUE, prob = c(p, 1-p)) #select marks; not by cluster (because nonseg). Determines majority/minority
kids_df = data.frame(long = kids$x,
lat = kids$y,
minor = kids$marks)
ns = min(nrow(kids_df), n_samp)
return(kids_df[sample(nrow(kids_df), ns), ]) #return sample of n rows
}
#code from 4-7-20 Moments copy
####################################################################################################
#Functions to calculate segregation
#May 2019 code to define K-nearest
source('/Users/jeremyspater/Dropbox/duke/political economy core/prospectus/methods paper/5-10-19_sim_knearest.R')
# ####################################################################################################
#Functions to calculate k-nearest mean, median, and sd for large number of simulations (BINARY)
#For nonsegregated neighborhoods
K_Nonseg_M = function(NeighSize, pminority = 0.3, k_in = 10){ #new version 4-1-20; higher moments
A = create_Nonseg(n = NeighSize,
xlim = xlim,
ylim = ylim,
pminority = pminority)
A_prime = k_sim(A, k = k_in)
#out = c( mean( A_prime[, paste0('Nearest_', k_in, '_Same') ] ) )
out = data.frame(KNearest_Mean = mean( A_prime[, paste0('Nearest_', k_in, '_Same') ] ),
KNearest_SD = sd( A_prime[, paste0('Nearest_', k_in, '_Same') ] ),
KNearest_Var = var( A_prime[, paste0('Nearest_', k_in, '_Same') ] ),
KNearest_Skew = skewness( A_prime[, paste0('Nearest_', k_in, '_Same') ] ),
KNearest_Kur = kurtosis( A_prime[, paste0('Nearest_', k_in, '_Same') ] ))
return(out)
}
#For segregated neighborhoods
K_Seg_M = function(NeighSize, pminority = 0.3, k_in = 10,  conc = 0.7){
A = create_Seg(n = NeighSize,
xlim = xlim,
ylim = ylim,
pminority = pminority,
conc = conc)
A_prime = k_sim(A, k = k_in)
#out = c( mean( A_prime[, paste0('Nearest_', k_in, '_Same') ] ) )
out = data.frame(KNearest_Mean = mean( A_prime[, paste0('Nearest_', k_in, '_Same') ] ),
KNearest_SD = sd( A_prime[, paste0('Nearest_', k_in, '_Same') ] ),
KNearest_Var = var( A_prime[, paste0('Nearest_', k_in, '_Same') ] ),
KNearest_Skew = skewness( A_prime[, paste0('Nearest_', k_in, '_Same') ] ),
KNearest_Kur = kurtosis( A_prime[, paste0('Nearest_', k_in, '_Same') ] ))
return(out)
}
#Obtain KNN statistics for parameter grid, seg and nonseg (BINARY)
#pminority_vec =  seq(0.1, 0.5, 0.1) #proportion of minorities
#conc_vec = seq(0.5, 1, 0.1) #concentration
pminority_vec = c(0.25) #just one value
conc_vec = c(0.75) #just one value
parm_exp = expand.grid(pminority_vec, conc_vec) %>%
rename(p_minority = Var1,
conc = Var2) ; rm(pminority_vec, conc_vec) #
#Run on grid
nsim = 1000#1000 #
n_neigh = 100#100 #people per neighborhood
n_tot = nrow(parm_exp) * nsim #number of rows in results matrix: grid points * sims/point
results_mat_nonseg = data.frame(matrix(NA, nrow = n_tot, ncol = 8))
results_mat_seg = data.frame(matrix(NA, nrow = n_tot, ncol = 8))
names(results_mat_nonseg) = c('NeighType','PMinor_Parm','Conc_Parm','KNearest_Mean', 'KNearest_SD', 'KNearest_Var', 'KNearest_Skew', 'KNearest_Kur')
names(results_mat_seg) = c('NeighType','PMinor_Parm','Conc_Parm','KNearest_Mean', 'KNearest_SD', 'KNearest_Var', 'KNearest_Skew', 'KNearest_Kur')
tic()
for(j in 1:nrow(parm_exp)){
print(j)
#K-nearest
Out_K_Nonseg = ldply(1:nsim, function(x) K_Nonseg_M(NeighSize = n_neigh,
pminority = parm_exp$p_minority[j],
k_in = 10 ))
Out_K_Seg = ldply(1:nsim, function(x) K_Seg_M(NeighSize = n_neigh,
pminority = parm_exp$p_minority[j],
k_in = 10,
conc = parm_exp$conc[j] ))
c1 = (j-1)*nsim + 1
c2 = (j)*nsim
results_mat_nonseg[c1:c2,1] = 'Nonseg. Binary'; results_mat_nonseg[c1:c2,2] = parm_exp[j,1]; results_mat_nonseg[c1:c2,3] = parm_exp[j,2]
results_mat_nonseg[c1:c2,4:8] =  Out_K_Nonseg    #Nonseg Results
results_mat_seg[c1:c2,1] = 'Seg. Binary'; results_mat_seg[c1:c2,2] = parm_exp[j,1]; results_mat_seg[c1:c2,3] = parm_exp[j,2]
results_mat_seg[c1:c2,4:8] = Out_K_Seg    #Seg results
}
library(e1071) #gives skewness, kurtosis
#code from 4-7-20 Moments copy
####################################################################################################
#Functions to calculate segregation
#May 2019 code to define K-nearest
source('/Users/jeremyspater/Dropbox/duke/political economy core/prospectus/methods paper/5-10-19_sim_knearest.R')
# ####################################################################################################
#Functions to calculate k-nearest mean, median, and sd for large number of simulations (BINARY)
#For nonsegregated neighborhoods
K_Nonseg_M = function(NeighSize, pminority = 0.3, k_in = 10){ #new version 4-1-20; higher moments
A = create_Nonseg(n = NeighSize,
xlim = xlim,
ylim = ylim,
pminority = pminority)
A_prime = k_sim(A, k = k_in)
#out = c( mean( A_prime[, paste0('Nearest_', k_in, '_Same') ] ) )
out = data.frame(KNearest_Mean = mean( A_prime[, paste0('Nearest_', k_in, '_Same') ] ),
KNearest_SD = sd( A_prime[, paste0('Nearest_', k_in, '_Same') ] ),
KNearest_Var = var( A_prime[, paste0('Nearest_', k_in, '_Same') ] ),
KNearest_Skew = skewness( A_prime[, paste0('Nearest_', k_in, '_Same') ] ),
KNearest_Kur = kurtosis( A_prime[, paste0('Nearest_', k_in, '_Same') ] ))
return(out)
}
#For segregated neighborhoods
K_Seg_M = function(NeighSize, pminority = 0.3, k_in = 10,  conc = 0.7){
A = create_Seg(n = NeighSize,
xlim = xlim,
ylim = ylim,
pminority = pminority,
conc = conc)
A_prime = k_sim(A, k = k_in)
#out = c( mean( A_prime[, paste0('Nearest_', k_in, '_Same') ] ) )
out = data.frame(KNearest_Mean = mean( A_prime[, paste0('Nearest_', k_in, '_Same') ] ),
KNearest_SD = sd( A_prime[, paste0('Nearest_', k_in, '_Same') ] ),
KNearest_Var = var( A_prime[, paste0('Nearest_', k_in, '_Same') ] ),
KNearest_Skew = skewness( A_prime[, paste0('Nearest_', k_in, '_Same') ] ),
KNearest_Kur = kurtosis( A_prime[, paste0('Nearest_', k_in, '_Same') ] ))
return(out)
}
#Obtain KNN statistics for parameter grid, seg and nonseg (BINARY)
#pminority_vec =  seq(0.1, 0.5, 0.1) #proportion of minorities
#conc_vec = seq(0.5, 1, 0.1) #concentration
pminority_vec = c(0.25) #just one value
conc_vec = c(0.75) #just one value
parm_exp = expand.grid(pminority_vec, conc_vec) %>%
rename(p_minority = Var1,
conc = Var2) ; rm(pminority_vec, conc_vec) #
#Run on grid
nsim = 1000#1000 #
n_neigh = 100#100 #people per neighborhood
n_tot = nrow(parm_exp) * nsim #number of rows in results matrix: grid points * sims/point
results_mat_nonseg = data.frame(matrix(NA, nrow = n_tot, ncol = 8))
results_mat_seg = data.frame(matrix(NA, nrow = n_tot, ncol = 8))
names(results_mat_nonseg) = c('NeighType','PMinor_Parm','Conc_Parm','KNearest_Mean', 'KNearest_SD', 'KNearest_Var', 'KNearest_Skew', 'KNearest_Kur')
names(results_mat_seg) = c('NeighType','PMinor_Parm','Conc_Parm','KNearest_Mean', 'KNearest_SD', 'KNearest_Var', 'KNearest_Skew', 'KNearest_Kur')
tic()
for(j in 1:nrow(parm_exp)){
print(j)
#K-nearest
Out_K_Nonseg = ldply(1:nsim, function(x) K_Nonseg_M(NeighSize = n_neigh,
pminority = parm_exp$p_minority[j],
k_in = 10 ))
Out_K_Seg = ldply(1:nsim, function(x) K_Seg_M(NeighSize = n_neigh,
pminority = parm_exp$p_minority[j],
k_in = 10,
conc = parm_exp$conc[j] ))
c1 = (j-1)*nsim + 1
c2 = (j)*nsim
results_mat_nonseg[c1:c2,1] = 'Nonseg. Binary'; results_mat_nonseg[c1:c2,2] = parm_exp[j,1]; results_mat_nonseg[c1:c2,3] = parm_exp[j,2]
results_mat_nonseg[c1:c2,4:8] =  Out_K_Nonseg    #Nonseg Results
results_mat_seg[c1:c2,1] = 'Seg. Binary'; results_mat_seg[c1:c2,2] = parm_exp[j,1]; results_mat_seg[c1:c2,3] = parm_exp[j,2]
results_mat_seg[c1:c2,4:8] = Out_K_Seg    #Seg results
}
toc() #8 sec for 10 simulations with 30 rows of parm_exp. 700 sec for 1000 simulations
#8 sec for 1000 simulations with 1 row of parm_exp
#code from 4-7-20 Moments copy
####################################################################################################
#Functions to calculate segregation
#May 2019 code to define K-nearest
source('https://github.com/jeremyspater/knn_moments/blob/main/5-10-19_sim_knearest_gh.R')
#May 2019 code to define K-nearest
source("https://github.com/jeremyspater/knn_moments/blob/main/5-10-19_sim_knearest_gh.R")
#May 2019 code to define K-nearest
source("https://github.com/jeremyspater/knn_moments/5-10-19_sim_knearest_gh.R")
#May 2019 code to define K-nearest
source("https://raw.githubusercontent.com/jeremyspater/knn_moments/main/5-10-19_sim_knearest_gh.R")
#code from 4-7-20 Moments copy
####################################################################################################
#Functions to calculate segregation
#May 2019 code to define K-nearest
source("https://raw.githubusercontent.com/jeremyspater/knn_moments/main/5-10-19_sim_knearest_gh.R")
# ####################################################################################################
#Functions to calculate k-nearest mean, median, and sd for large number of simulations (BINARY)
#For nonsegregated neighborhoods
K_Nonseg_M = function(NeighSize, pminority = 0.3, k_in = 10){ #new version 4-1-20; higher moments
A = create_Nonseg(n = NeighSize,
xlim = xlim,
ylim = ylim,
pminority = pminority)
A_prime = k_sim(A, k = k_in)
#out = c( mean( A_prime[, paste0('Nearest_', k_in, '_Same') ] ) )
out = data.frame(KNearest_Mean = mean( A_prime[, paste0('Nearest_', k_in, '_Same') ] ),
KNearest_SD = sd( A_prime[, paste0('Nearest_', k_in, '_Same') ] ),
KNearest_Var = var( A_prime[, paste0('Nearest_', k_in, '_Same') ] ),
KNearest_Skew = skewness( A_prime[, paste0('Nearest_', k_in, '_Same') ] ),
KNearest_Kur = kurtosis( A_prime[, paste0('Nearest_', k_in, '_Same') ] ))
return(out)
}
#For segregated neighborhoods
K_Seg_M = function(NeighSize, pminority = 0.3, k_in = 10,  conc = 0.7){
A = create_Seg(n = NeighSize,
xlim = xlim,
ylim = ylim,
pminority = pminority,
conc = conc)
A_prime = k_sim(A, k = k_in)
#out = c( mean( A_prime[, paste0('Nearest_', k_in, '_Same') ] ) )
out = data.frame(KNearest_Mean = mean( A_prime[, paste0('Nearest_', k_in, '_Same') ] ),
KNearest_SD = sd( A_prime[, paste0('Nearest_', k_in, '_Same') ] ),
KNearest_Var = var( A_prime[, paste0('Nearest_', k_in, '_Same') ] ),
KNearest_Skew = skewness( A_prime[, paste0('Nearest_', k_in, '_Same') ] ),
KNearest_Kur = kurtosis( A_prime[, paste0('Nearest_', k_in, '_Same') ] ))
return(out)
}
#Obtain KNN statistics for parameter grid, seg and nonseg (BINARY)
#pminority_vec =  seq(0.1, 0.5, 0.1) #proportion of minorities
#conc_vec = seq(0.5, 1, 0.1) #concentration
pminority_vec = c(0.25) #just one value
conc_vec = c(0.75) #just one value
parm_exp = expand.grid(pminority_vec, conc_vec) %>%
rename(p_minority = Var1,
conc = Var2) ; rm(pminority_vec, conc_vec) #
#Run on grid
nsim = 1000#1000 #
n_neigh = 100#100 #people per neighborhood
n_tot = nrow(parm_exp) * nsim #number of rows in results matrix: grid points * sims/point
results_mat_nonseg = data.frame(matrix(NA, nrow = n_tot, ncol = 8))
results_mat_seg = data.frame(matrix(NA, nrow = n_tot, ncol = 8))
names(results_mat_nonseg) = c('NeighType','PMinor_Parm','Conc_Parm','KNearest_Mean', 'KNearest_SD', 'KNearest_Var', 'KNearest_Skew', 'KNearest_Kur')
names(results_mat_seg) = c('NeighType','PMinor_Parm','Conc_Parm','KNearest_Mean', 'KNearest_SD', 'KNearest_Var', 'KNearest_Skew', 'KNearest_Kur')
tic()
for(j in 1:nrow(parm_exp)){
print(j)
#K-nearest
Out_K_Nonseg = ldply(1:nsim, function(x) K_Nonseg_M(NeighSize = n_neigh,
pminority = parm_exp$p_minority[j],
k_in = 10 ))
Out_K_Seg = ldply(1:nsim, function(x) K_Seg_M(NeighSize = n_neigh,
pminority = parm_exp$p_minority[j],
k_in = 10,
conc = parm_exp$conc[j] ))
c1 = (j-1)*nsim + 1
c2 = (j)*nsim
results_mat_nonseg[c1:c2,1] = 'Nonseg. Binary'; results_mat_nonseg[c1:c2,2] = parm_exp[j,1]; results_mat_nonseg[c1:c2,3] = parm_exp[j,2]
results_mat_nonseg[c1:c2,4:8] =  Out_K_Nonseg    #Nonseg Results
results_mat_seg[c1:c2,1] = 'Seg. Binary'; results_mat_seg[c1:c2,2] = parm_exp[j,1]; results_mat_seg[c1:c2,3] = parm_exp[j,2]
results_mat_seg[c1:c2,4:8] = Out_K_Seg    #Seg results
}
toc() #8 sec for 10 simulations with 30 rows of parm_exp. 700 sec for 1000 simulations
#8 sec for 1000 simulations with 1 row of parm_exp
